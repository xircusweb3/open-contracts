#include "imports/stdlib.fc";
#include "imports/flags.fc";
#include "imports/hashmap.fc";
#include "imports/address.fc";
#include "imports/send.fc";
#include "imports/gas_fees.fc";
#include "imports/jetton-opcodes.fc";
#include "imports/jetton-send.fc";

const op::withdraw = "op::withdraw"c;
const op::withdraw_jetton = "op::withdraw_jetton"c;
const op::change_shares = "op::change_shares"c;
const op::change_owner = "op::change_owner"c;
const op::change_content = "op::change_content"c;

global slice pay::owner;
global int pay::public_key;
global cell pay::shares;
global cell pay::content;

_ load_data() impure inline {
  var ds = get_data().begin_parse();
  pay::owner = ds~load_msg_addr();
  pay::public_key = ds~load_uint(256);
  pay::shares = ds~load_dict();
  pay::content = ds~load_ref();
  ds.end_parse();
}

_ save_data() impure inline {
  set_data(
    begin_cell()
      .store_slice(pay::owner)
      .store_uint(pay::public_key, 256)
      .store_dict(pay::shares)
      .store_ref(pay::content)
      .end_cell()
  );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { ;; ignore empty messages
    return ();
  }
  slice cs = in_msg_full.begin_parse();
  int flags = cs~load_uint(4);

  if (flags & 1) { ;; ignore all bounced messages
    return ();
  }
  slice sender = cs~load_msg_addr();

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);

  load_data();

  if (op == op::withdraw) {
    var [balance, _] = get_balance();    
    int coins = in_msg_body~load_coins();
    coins = coins > MIN_GAS_FEE ? coins : balance;
    coins = coins - MIN_GAS_FEE;

    throw_unless(500, coins > 0);
    raw_reserve(MIN_GAS_FEE, 0);

    do {
      (slice receiver, slice r, int f?) = pay::shares~dict::delete_get_min(ADDRESS_SIZE);
      if (f?) {
        slice ref = r~load_ref().begin_parse();
        send_grams(receiver, muldiv(coins, ref~load_uint(16), 10000));
      }
    } until (~ f?);
    save_data();
    return ();
  }

  if (op == op::withdraw_jetton) {
    slice wallet = in_msg_body~load_msg_addr();
    int jettons = in_msg_body~load_coins();
    do {
      (slice receiver, slice r, int f?) = pay::shares~dict::delete_get_min(ADDRESS_SIZE);
      if (f?) {
        slice ref = r~load_ref().begin_parse();
        send_jetton(wallet, receiver, muldiv(jettons, ref~load_uint(16), 10000));
      }
    } until (~ f?);
    save_data();
    return ();
  }

  throw_unless(400, equal_slices_bits(sender, pay::owner));

  if (op == op::change_owner) {
    pay::owner = in_msg_body~load_msg_addr();
    save_data();
    return ();    
  }

  if (op == op::change_shares) {
    pay::shares = in_msg_body~load_dict();
    save_data();
    return ();    
  }

  if (op == op::change_content) {
    pay::content = in_msg_body~load_ref();
    save_data();
    return ();
  }  

  throw(0xffff);    
}
